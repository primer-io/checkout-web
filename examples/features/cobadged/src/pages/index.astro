---
import { createClientSession } from '../api/createClientSession';
import Layout from '../layouts/Layout.astro';

const { clientToken } = await createClientSession({
  amount: 100,
  currencyCode: 'GBP',
});

const cardNumberId = 'card-number';
const cardSecurityCodeId = 'card-security-code';
const cardExpiryId = 'card-expiry';
---

<Layout title="Primer example: cobadged">
  <main>
    <div
      id="vars"
      style={{ display: 'none' }}
      data-client-token={clientToken}
      data-card-number-id={cardNumberId}
      data-card-security-code-id={cardSecurityCodeId}
      data-card-expiry-id={cardExpiryId}
    >
    </div>
    <form id="card" action="">
      <div class="row">
        <label>
          Card number
          <div id={cardNumberId}>
            <input disabled placeholder="4321 1234 9876 6789" />
          </div>
        </label>
        <div id="card-networks" style={{ display: 'none' }}></div>
      </div>
      <div class="row">
        <label>
          Expiry date
          <div id={cardExpiryId}>
            <input disabled placeholder="01/25" />
          </div>
        </label>
        <label>
          Security code
          <div id={cardSecurityCodeId}>
            <input disabled placeholder="⏺⏺⏺" />
          </div>
        </label>
      </div>
      <label>
        Cardholder name
        <input name="card-name" placeholder="John Doe" />
      </label>
      <button>Pay</button>
      <div id="error" style={{ display: 'none' }}></div>
    </form>
  </main>
</Layout>

<script>
  // import { Primer, type CheckoutStyle } from '@primer-io/checkout-web';
  import { type CheckoutStyle } from '@primer-io/checkout-web';

  await import('https://sdk.dev.primer.io/web/preview-1579/Primer.min.js');

  const cdn = 'https://goat-assets.production.core.primer.io/brand/card';

  const { Primer } = window as any as {
    Primer: (typeof import('@primer-io/checkout-web'))['Primer'];
  };

  const { clientToken, cardNumberId, cardSecurityCodeId, cardExpiryId } = (
    document.querySelector('#vars') as HTMLElement
  ).dataset;

  const primer = await Primer.createHeadless(clientToken || '');
  const cardForm = document.querySelector('#card') as HTMLFormElement;

  primer.configure({
    onCheckoutFail(error, data, handler) {
      console.log(error);
      handler?.showErrorMessage();
      cardForm.querySelector('button')!.disabled = false;
      const errorElement = document.querySelector('#error') as HTMLElement;
      errorElement.style.display = '';
      errorElement.innerText = error.message;
    },
    onCheckoutComplete(data) {
      cardForm.innerText = `Payment successful.\nOrderId: ${data.payment.orderId}`;
    },
    async onAvailablePaymentMethodsLoad(paymentMethods) {
      for (const paymentMethod of paymentMethods)
        switch (paymentMethod.managerType) {
          case 'CARD': {
            const cardManager = await primer.createPaymentMethodManager(
              'PAYMENT_CARD',
              {
                onCardNetworksChange(
                  cardNetworks: { displayName: string; value: string }[],
                ) {
                  const cardNetworkElement =
                    document.getElementById('card-networks')!;
                  cardNetworkElement.style.display = cardNetworks.length
                    ? ''
                    : 'none';
                  cardNetworkElement.innerHTML = '';
                  cardNetworks.forEach((cardNetwork, index) => {
                    const option = document.createElement('input');
                    option.ariaLabel = cardNetwork.displayName;
                    option.checked = !index;
                    option.name = 'card-network';
                    option.innerText = cardNetwork.displayName;
                    // TODO: remove replace when CartesBancaires logo is up
                    const logo = cardNetwork.value
                      .toLowerCase()
                      .replace('cartes_bancaires', 'jcb');
                    option.style.backgroundImage = `url(${cdn}/${logo}.svg)`;
                    option.type = 'radio';
                    option.value = cardNetwork.value;
                    cardNetworkElement.append(option);
                  });
                },
              } as any,
            );

            const { cardNumberInput, cvvInput, expiryInput } =
              cardManager?.createHostedInputs() ?? {};

            cardForm.addEventListener('submit', (event) => {
              event.preventDefault();
              cardForm.querySelector('button')!.disabled = true;
              cardManager?.submit();
            });

            const style: CheckoutStyle = {
              input: {
                base: {
                  borderColor: 'gray',
                  borderRadius: '2px',
                  borderStyle: 'solid',
                  borderWidth: '1px',
                  height: '40px',
                  paddingHorizontal: 8,
                },
              },
            };

            document.getElementById(cardNumberId!)!.innerHTML = '';
            cardNumberInput?.render(cardNumberId || '', {
              placeholder: '4321 1234 9876 6789',
              style,
            });

            document.getElementById(cardSecurityCodeId!)!.innerHTML = '';
            cvvInput?.render(cardSecurityCodeId || '', { style });

            document.getElementById(cardExpiryId!)!.innerHTML = '';
            expiryInput?.render(cardExpiryId || '', {
              placeholder: '01/25',
              style,
            });

            const cardholderName = document.querySelector(
              '[name="card-name"]',
            ) as HTMLInputElement;
            cardholderName.addEventListener('input', () => {
              cardManager?.setCardholderName(cardholderName.value || '');
            });

            break;
          }
          case 'NATIVE':
          case 'REDIRECT': {
            // ignoring these types for simplicity in this example.
            // make sure you implement them in case you're using such payment types.
            break;
          }
          default:
            throw new Error(
              `Type of payment method manager not supported: ${paymentMethod.managerType}`,
            );
        }
    },
  });

  primer.start();
</script>

<style>
  main {
    background-color: #eee;
    display: grid;
    place-items: center;
  }

  form {
    background-color: #fff;
    border-radius: 8px;
    display: grid;
    gap: 8px;
    padding: 24px;
    width: 400px;
  }

  label {
    display: grid;
  }

  .row {
    display: grid;
    gap: 8px;
    grid-auto-flow: column;
  }

  button,
  input {
    height: 40px;
    padding: 8px;
    width: 100%;
  }

  #card-networks {
    display: flex;
    gap: 8px;
    padding-top: 18px;
    place-items: center;
  }
</style>

<style is:inline>
  iframe {
    max-height: 40px;
  }

  [name='card-network'] {
    aspect-ratio: 28/20;
    appearance: unset;
    background-size: cover;
    display: block;
    height: 32px;
    margin: 0;
  }

  [name='card-network']:not(:checked) {
    opacity: 0.5;
  }
</style>
